// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=invertOpCode);                                  // Inverse of bit that decides the opCode.
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=opcodeMuxOut);   // Determine input to A-Register based on opCode.
    
    And(a=instruction[5], b=instruction[15], out=writeAReg);                    // Write to A-reg if it's d-bit is set and this is a C instr.
    Or(a=invertOpCode, b=writeAReg ,out=loadARegister);                         // Or Write to A-reg if this is an A-instruction.
    ARegister(in=opcodeMuxOut, load=loadARegister, out=aRegOutput, out[0..14]=addressM);    // Write the output from the mux to A-reg.

    And(a=instruction[4], b=instruction[15], out=loadDReg);                     // Load D register when middle d-bit is set and it's a C instruction.
    DRegister(in=aluOutput, load=loadDReg, out=x);                              // D-register's output is the ALU's x input.

    Mux16(a=aRegOutput, b=inM, sel=instruction[12], out=y);                     // The a-bit decides whether to load A register's content or inM.

    // The six c-bits from the C-instruction are the control bits for the ALU.
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOutput, zr=zr ,ng=ng);

    And(a=instruction[3], b=instruction[15], out=writeM);                        // write to RAM[A] if the last d-bit is set and it's a C-instr.
    
    // Check which jump condition out of the 8 possible based on zr and ng flags from ALU.
    And(a=zr, b=true, out=jeq);                                                  // JEQ = (zr == 1)
    Not(in=jeq, out=jne);                                                        // JNE = !JEQ
    And(a=ng, b=true, out=jlt);                                                  // JLT = (ng == 1)

    Not(in=ng, out=notNeg);
    And(a=notNeg, b=jne, out=jgt);                                               // JGT = (ng == 0 && JNE)

    Or(a=jgt, b=jeq, out=jge);                                                   // JGE = (JGT || JEQ)
    Or(a=jlt, b=jeq, out=jle);                                                   // JLE = (JLT || JEQ)
    

    Mux8Way16(
        a=false,
        b[1..15]=false, b[0]=jgt,
        c[1..15]=false, c[0]=jeq,
        d[1..15]=false, d[0]=jge,
        e[1..15]=false, e[0]=jlt,
        f[1..15]=false, f[0]=jne,
        g[1..15]=false, g[0]=jle,
        h[1..15]=false, h[0]=true,
        sel=instruction[0..2], out[0]=loadIntermediate);                         // Use j-bits to select jump condition. PC = A if true, else PC++

    And(a=loadIntermediate, b=instruction[15], out=load);                        // Confirm it's a C instruction.
    Not(in=load, out=inc);                                                       // inc = !load


    PC(in=aRegOutput,load=load, inc=inc ,reset=reset ,out[0..14]=pc);
}